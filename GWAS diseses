# app.R

# --- 1. LOAD PACKAGES ---
library(shiny)
library(bslib)
library(dplyr)
library(ggplot2)
library(plotly)
library(data.table)
library(DT)

# --- 2. GLOBAL DATA / FUNCTIONS ---

# --- UPDATED with diagnostic messages ---
load_and_clean_gwas_data <- function(filepath, col_map = NULL, delimiter = NULL, trait_name_for_func, study_info_list_for_func) {
  tryCatch({
    message("--- Starting Data Load ---")
    message("File path: ", filepath)
    if (!file.exists(filepath)) {
        stop(paste("File not found at path:", filepath))
    }

    message("Step 1: Reading file with fread()...")
    gwas_data_raw <- as_tibble(fread(filepath, header = TRUE, sep = delimiter, stringsAsFactors = FALSE, check.names = FALSE))
    message("Step 1 COMPLETE. Rows read: ", nrow(gwas_data_raw))
    
    if (!is.null(col_map) && length(col_map) > 0) { 
      message("Step 2: Renaming columns...")
      current_names <- names(gwas_data_raw)
      new_names <- current_names
      for(i in seq_along(current_names)){
          if(current_names[i] %in% names(col_map)){
              new_names[i] <- col_map[[current_names[i]]]
          }
      }
      names(gwas_data_raw) <- new_names
      message("Step 2 COMPLETE.")
    }
    
    required_cols <- c("SNP", "CHR", "BP", "P", "A1", "A2", "EFFECT_A1", "SE") 
    missing_cols <- setdiff(required_cols, names(gwas_data_raw))
    if (length(missing_cols) > 0) {
      stop(paste0("Missing required columns after renaming: ", paste(missing_cols, collapse = ", ")))
    }
    
    if (!"FREQ_A1" %in% names(gwas_data_raw)) {
      gwas_data_raw$FREQ_A1 <- NA_real_ 
    }
    
    message("Step 3: Cleaning and filtering data types...")
    gwas_data_cleaned <- gwas_data_raw %>%
      mutate(Original_CHR = as.character(CHR)) %>%
      mutate(Cleaned_CHR_temp = toupper(gsub("^chr", "", CHR))) %>%
      mutate(CHR = case_when(
        Cleaned_CHR_temp == "X" ~ 23,
        Cleaned_CHR_temp == "Y" ~ 24,
        Cleaned_CHR_temp == "MT" ~ 25,
        grepl("^[0-9]+$", Cleaned_CHR_temp) ~ as.numeric(Cleaned_CHR_temp), 
        TRUE ~ NA_real_ 
      )) %>%
      select(-Cleaned_CHR_temp) %>%
      filter(!is.na(CHR), !is.na(BP), !is.na(P)) %>%
      mutate(BP = as.numeric(BP), P = as.numeric(P)) %>%
      mutate(LOG10P = -log10(P + .Machine$double.eps)) %>%
      mutate(EFFECT_A1 = as.numeric(EFFECT_A1), SE = as.numeric(SE)) %>%
      arrange(CHR, BP)
    message("Step 3 COMPLETE. Rows after cleaning: ", nrow(gwas_data_cleaned))
    
    if (nrow(gwas_data_cleaned) == 0) {
        message("No rows remaining after cleaning. Stopping.")
        return(NULL)
    }
    
    message("Step 4: Calculating cumulative positions for Manhattan plot...")
    gwas_data_processed_with_cumpos <- gwas_data_cleaned %>%
      group_by(CHR) %>%
      summarise(max_bp = max(BP, na.rm = TRUE), .groups = 'drop') %>%
      mutate(bp_add = lag(cumsum(as.numeric(max_bp)), default = 0)) %>%
      select(CHR, bp_add) %>%
      right_join(gwas_data_cleaned, by = "CHR") %>%
      mutate(BP_cum = as.numeric(BP) + bp_add)
    message("Step 4 COMPLETE.")
    
    if (nrow(gwas_data_processed_with_cumpos) == 0) return(NULL)
    
    message("Step 5: Calculating axis set...")
    current_axis_set <- gwas_data_processed_with_cumpos %>%
      group_by(CHR) %>%
      summarise(center = mean(BP_cum, na.rm = TRUE), Original_CHR = first(Original_CHR), .groups = 'drop')
    message("Step 5 COMPLETE.")
    
    if (nrow(current_axis_set) == 0 || !is.finite(current_axis_set$center[1])) return(NULL) 
    
    message("--- Data Load and Processing Complete ---")
    return(list(
      data = gwas_data_processed_with_cumpos,
      trait = trait_name_for_func, 
      axis_set = current_axis_set,
      study_info = study_info_list_for_func 
    ))
  }, error = function(e) {
    # This will now print the specific error to the console
    message("!!! AN ERROR OCCURRED: ", e$message)
    showNotification(paste("Error processing data:", e$message), type = "error", duration = 15)
    return(NULL)
  })
}

# --- DATASET CATALOG ---
base_data_path <- "/sc/arion/projects/AsgariLab/abhijith/gwas_All_ID/saige_gwas"
data_filename <- "gwas_meta_biome1.tsv" 

dataset_catalog <- list(
    "staph_aureus" = list(
        id = "staph_aureus",
        trait = "Staphylococcus aureus (minCodeCount1)",
        filepath = file.path(base_data_path, "gwas_ID_002.1_Staphylococcus_aureus_minCodeCount1", data_filename),
        study_info = list(reported_trait = "Staphylococcus aureus infection", first_author = "Abhijith", pubmed_id="TBD"),
        col_map = list(p.value = "P", CHR = "CHR", POS = "BP", rsid = "SNP", Allele1 = "A1", Allele2 = "A2", BETA = "EFFECT_A1", SE = "SE", AF_Allele2 = "FREQ_A1"),
        delimiter = "\t"
    ),
    "staph_aureus_min2" = list(
        id = "staph_aureus_min2",
        trait = "Staphylococcus (minCodeCount2)",
        filepath = file.path(base_data_path, "gwas_ID_002_Staphylococcus_minCodeCount1", data_filename),
        study_info = list(reported_trait = "Staphylococcus infection", first_author = "Abhijith", pubmed_id="TBD"),
        col_map = list(p.value = "P", CHR = "CHR", POS = "BP", rsid = "SNP", Allele1 = "A1", Allele2 = "A2", BETA = "EFFECT_A1", SE = "SE", AF_Allele2 = "FREQ_A1"),
        delimiter = "\t"
    ),
     "e_coli" = list(
        id = "e_coli",
        trait = "Escherichia coli",
        filepath = file.path(base_data_path, "gwas_ID_003_Escherichia_coli_minCodeCount1", data_filename),
        study_info = list(reported_trait = "Escherichia coli infection", first_author = "Abhijith", pubmed_id="TBD"),
        col_map = list(p.value = "P", CHR = "CHR", POS = "BP", rsid = "SNP", Allele1 = "A1", Allele2 = "A2", BETA = "EFFECT_A1", SE = "SE", AF_Allele2 = "FREQ_A1"),
        delimiter = "\t"
    ),
    "strep_a" = list(
        id = "strep_a",
        trait = "Group A Streptococcus",
        filepath = file.path(base_data_path, "gwas_ID_004.2_Group_A_Streptococcus_minCodeCount1", data_filename),
        study_info = list(reported_trait = "Group A Streptococcus infection", first_author = "Abhijith", pubmed_id="TBD"),
        col_map = list(p.value = "P", CHR = "CHR", POS = "BP", rsid = "SNP", Allele1 = "A1", Allele2 = "A2", BETA = "EFFECT_A1", SE = "SE", AF_Allele2 = "FREQ_A1"),
        delimiter = "\t"
    )
)

# --- 3. UI ---
ui <- page_sidebar(
  theme = bs_theme(version = 5, bootswatch = "flatly", primary = "#007bff"),
  title = "GWAS Viewer",
  sidebar = sidebar(
    selectInput("phenotype_selector", h4("Select a Study"),
        choices = setNames(sapply(dataset_catalog, `[[`, "id"), sapply(dataset_catalog, `[[`, "trait"))),
    hr(),
    h4("Filters"),
    textInput("snp_search", "Search by SNP ID:", placeholder = "e.g., rs12345"),
    sliderInput("p_threshold", "Significance Threshold (-log10 P):", min = 0, max = 10, value = 7.3, step = 0.1),
    hr(),
    actionButton("apply_filters_button", "Apply Filters", class = "btn-primary w-100")
  ),
  navset_card_tab(
    nav_panel("Manhattan Plot", card(card_header(uiOutput("manhattan_plot_header")), plotlyOutput("manhattan_plot", height = "500px"))),
    nav_panel("QQ Plot", card(card_header(uiOutput("qq_plot_header")), plotlyOutput("qq_plot", height = "500px"))),
    nav_panel("Summary Data",
              card(card_header(uiOutput("summary_data_header")), DT::dataTableOutput("results_table")),
              card(card_header(uiOutput("study_info_header")), uiOutput("study_info_content"))
    )
  )
)

# --- 4. SERVER ---
server <- function(input, output, session) {
  
  r_gwas_info <- eventReactive(input$phenotype_selector, {
      req(input$phenotype_selector)
      selected_study_metadata <- dataset_catalog[[input$phenotype_selector]]
      load_and_clean_gwas_data(
          filepath = selected_study_metadata$filepath, 
          col_map = selected_study_metadata$col_map,
          delimiter = selected_study_metadata$delimiter,
          trait_name_for_func = selected_study_metadata$trait,
          study_info_list_for_func = selected_study_metadata$study_info
      )
  }, ignoreNULL = FALSE) 

  filtered_data <- eventReactive(input$apply_filters_button, {
      req(r_gwas_info())
      base_data <- r_gwas_info()$data
      data_out <- base_data %>% filter(LOG10P >= input$p_threshold)
      if (input$snp_search != "") {
          data_out <- data_out %>% filter(grepl(input$snp_search, SNP, ignore.case = TRUE))
      }
      return(data_out)
  }, ignoreNULL = FALSE)
  
  observeEvent(r_gwas_info(), {
    req(r_gwas_info())
    max_p <- max(r_gwas_info()$data$LOG10P, na.rm = TRUE)
    if (is.finite(max_p)) {
      updateSliderInput(session, "p_threshold", max = ceiling(max_p))
    }
  })
  
  output$manhattan_plot_header <- renderUI({ req(r_gwas_info()); h4(paste("Manhattan Plot -", r_gwas_info()$trait)) })
  output$qq_plot_header <- renderUI({ req(r_gwas_info()); h4(paste("QQ Plot -", r_gwas_info()$trait)) })
  output$summary_data_header <- renderUI({ req(r_gwas_info()); h5("Results Table") })
  output$study_info_header <- renderUI({ req(r_gwas_info()); h5(paste("Study Information:", r_gwas_info()$trait)) })
  
  output$manhattan_plot <- renderPlotly({
    req(r_gwas_info())
    plot_data <- filtered_data()
    if (nrow(plot_data) == 0) {
        return(plotly_empty(type = "scatter", mode = "markers") %>% layout(title = "No significant SNPs found with current filters."))
    }
    if(nrow(plot_data) > 500000) {
        plot_data <- plot_data %>% slice_sample(n = 500000)
    }
    axis_set <- r_gwas_info()$axis_set
    p <- ggplot(plot_data, aes(x = BP_cum, y = LOG10P, text = paste("SNP:", SNP, "<br>P:", formatC(P, format="e", digits=2)))) + 
      geom_point(aes(color = as.factor(CHR %% 2)), alpha = 0.8, size = 1.5) +
      geom_hline(yintercept = input$p_threshold, color = "red", linetype = "dashed") +
      scale_color_manual(values = c("0" = "#27647B", "1" = "#56B4E9")) +
      scale_x_continuous(label = axis_set$Original_CHR, breaks = axis_set$center) +
      labs(x = "Chromosome", y = expression(paste("-log"[10], "(P)"))) +
      theme_minimal() +
      theme(legend.position = "none", panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank())
    ggplotly(p, tooltip = "text")
  })
  
  output$qq_plot <- renderPlotly({
    req(r_gwas_info())
    qq_data <- r_gwas_info()$data
    if (nrow(qq_data) > 2e5) { qq_data <- sample_n(qq_data, 2e5) }
    observed <- -log10(sort(qq_data$P))
    expected <- -log10(ppoints(length(observed)))
    qq_df <- data.frame(expected, observed)
    p <- ggplot(qq_df, aes(x=expected, y=observed)) +
        geom_point(alpha=0.5, color="#27647B") +
        geom_abline(intercept=0, slope=1, color="red") +
        labs(x = expression(paste("Expected -log"[10], "(P)")), y = expression(paste("Observed -log"[10], "(P)"))) +
        theme_minimal()
    ggplotly(p)
  })
  
  output$results_table <- DT::renderDataTable({
    req(nrow(filtered_data()) > 0)
    filtered_data() %>%
      arrange(P) %>%
      select(SNP, CHR, BP, P, A1, A2, FREQ_A1, EFFECT_A1, SE) %>%
      mutate(P = formatC(P, format = "e", digits = 2), across(where(is.numeric), ~round(., 4)))
  }, options = list(pageLength = 10, scrollX = TRUE), server = FALSE)
  
  output$study_info_content <- renderUI({
    req(r_gwas_info())
    info <- r_gwas_info()$study_info
    create_info_p <- function(label, value) {
        if (!is.null(value) && !is.na(value) && nzchar(as.character(value))) {
            tags$p(tags$b(paste0(label, ": ")), as.character(value))
        }
    }
    div(
      create_info_p("Reported Trait", info$reported_trait),
      create_info_p("First Author", info$first_author),
      create_info_p("PubMed ID", info$pubmed_id)
    )
  })
}

# --- 5. RUN ---
shinyApp(ui, server)
